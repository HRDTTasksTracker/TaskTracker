<%=render "header.html.erb"%>

<!-- The page title header adjust the -->
<!-- content to compensate for the fixed navigation bar -->
<h1 class="task-page-title">
  <div class="task-page-title-styling">Tasks</div>
  <div class="filter-field">
      <form action="/filtered">
        <input type="text" name="tagsearch" id="tagsearch" />
        <input type="submit" value="Filter by Tag"/>
      </form>
    </div>
  </h1>

<% if current_user.role == 'admin' || current_user.role == 'moderator' %>
  <div id="overlay">
    <span title="Create New Task">
      <a href="tasks/new">
        <img class="create-button" src="/assets/create-button.png" alt="Create New Task Button" width="110px" height="110px">
      </a>
    </span>
  </div>
<% end %>

<!-- This will list all the task id and task names -->
<body>
  <div>
  <% @tasks.in_groups_of(1) do |group| %>
    <div class="card-group">
      <% group.compact.each do |task| %>

        
          <div class="card">
            <a href="tasks/<%= task.id %>">
              <div class="container">
                <h4><b> <%=task.task_name%> </b></h4>
                <p>Task ID: <%=task.id%></p>
                <p>Due Date: <%=task.due_date.strftime('%Y-%m-%d')%></p>
                <p>Description: <%=task.task_description%></p>
                <p>Tag: <%=task.tag%></p>
              </div>
            </a>
          </div>

      <% end %>
    </div>
  <% end %>
</body>

<script type="text/javascript">

window.addEventListener("load", function() {
  "use strict";



    
    var nodesList = document.getElementsByClassName("node");
    var connection = [];
    var lines = [];
    console.log(nodesList);



      //creating the array of tasks
       for (var i = 0; i < nodesList.length; i++) 
      {
        connection[i]=[];

      }



      //assigning each task their child and parent
      for (var i = 0; i < nodesList.length; i++) 
      {
        var tmp = nodesList[i].getElementsByClassName('node-name')[0].id
        if(tmp)
        {
            connection[tmp-1].push(i);
            connection[i].push(tmp-1);
        }
      }



      //creating the lines
      for (var x = 0; x < connection.length; x++) 
      {
        console.log()
        for (var y = 0; y < connection[x].length; y++) 
        {
            console.log(document.getElementsByClassName("name active")[x*2])
            console.log(document.getElementsByClassName("name active")[x*connection[x][y]+1])



          var tmpLine = new LeaderLine(document.getElementsByClassName("name active")[x*2], document.getElementsByClassName("name active")[x*connection[x][y]+1], {
            startPlug: "behind",
            endPlug: "behind",
            size: 4,
            startPlugSize: 1,
            endPlugSize: 1,
            startSocket: "left",
            endSocket: "right",    
            color: "#30c117"

          });
          console.log(1);
          lines.push(tmpLine);
        }

      }

      console.log(lines);


      for (var x = 0; x < nodesList.length; x++) 
      {
         new PlainDraggable(nodesList[x], {
          onMove: function() {
            for (var y = 0; y < lines.length; y++) 
              {
              lines[y].position();
              }
          },

        });


      }


     
      console.log(lines);
      
});


    function myFunction(elem){
  document.location.href = location.href+"/"+elem;
}



</script>

